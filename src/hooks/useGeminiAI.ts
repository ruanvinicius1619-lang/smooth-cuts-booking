import { useState } from 'react';
import { GEMINI_CONFIG, BARBER_ASSISTANT_PROMPT } from '../config/gemini';
import { HarmCategory, HarmBlockThreshold } from '@google/generative-ai';

interface GeminiResponse {
  text: string;
  error?: string;
}

interface CustomerProfile {
  hairType: string;
  preferredStyle: string;
  budget: string;
  frequency: string;
  specialNeeds: string;
}

interface Service {
  id: string;
  name: string;
  description: string;
  price: number;
  duration: number;
}

export const useGeminiAI = () => {
  const [isLoading, setIsLoading] = useState(false);

  const generateResponse = async (
    message: string,
    context: {
      customerProfile?: CustomerProfile;
      services?: Service[];
      conversationHistory?: string[];
    }
  ): Promise<GeminiResponse> => {
    setIsLoading(true);
    
    try {
      // Verifica se a API key do Gemini est√° configurada
      if (GEMINI_CONFIG.API_KEY) {
        try {
          const { GoogleGenerativeAI } = await import('@google/generative-ai');
          const genAI = new GoogleGenerativeAI(GEMINI_CONFIG.API_KEY);
          const model = genAI.getGenerativeModel({ 
            model: GEMINI_CONFIG.MODEL,
            generationConfig: GEMINI_CONFIG.GENERATION_CONFIG,
            safetySettings: [
              {
                category: HarmCategory.HARM_CATEGORY_HARASSMENT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
              },
              {
                category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
              },
              {
                category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
              },
              {
                category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
              },
            ]
          });
          
          const prompt = formatPromptWithContext(message, context);
          const result = await model.generateContent(prompt);
          const response = result.response.text();
          
          setIsLoading(false);
          return { text: response };
        } catch (geminiError) {
          console.error('Erro na API do Gemini, usando fallback:', geminiError);
          // Continua para o fallback em caso de erro
        }
      }
      
      // Fallback: resposta inteligente simulada
      const response = await generateIntelligentResponse(message, context);
      
      setIsLoading(false);
      return { text: response };
    } catch (error) {
      setIsLoading(false);
      console.error('Error generating AI response:', error);
      return {
        text: "Desculpe, tive um problema t√©cnico. Mas posso te ajudar com informa√ß√µes sobre nossos servi√ßos!",
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  };

  const generateRecommendations = async (
    customerProfile: CustomerProfile,
    services: Service[]
  ): Promise<GeminiResponse> => {
    setIsLoading(true);
    
    try {
      const recommendations = analyzeProfileAndRecommend(customerProfile, services);
      const response = formatRecommendationsWithAI(customerProfile, recommendations);
      
      setIsLoading(false);
      return { text: response };
    } catch (error) {
      setIsLoading(false);
      return {
        text: "Com base no seu perfil, recomendo nossos servi√ßos mais populares!",
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  };

  return {
    generateResponse,
    generateRecommendations,
    isLoading
  };
};

// Helper function to format prompt with context
const formatPromptWithContext = (
  message: string,
  context: {
    customerProfile?: CustomerProfile;
    services?: Service[];
    conversationHistory?: string[];
  }
): string => {
  const servicesText = context.services 
    ? context.services.map(s => `${s.name} - R$ ${s.price} (${s.duration} min): ${s.description}`).join('\n')
    : 'Servi√ßos n√£o dispon√≠veis no momento';
  
  const profileText = context.customerProfile 
    ? Object.entries(context.customerProfile).map(([key, value]) => `${key}: ${value}`).join(', ')
    : 'Perfil n√£o informado';
  
  const historyText = context.conversationHistory 
    ? context.conversationHistory.slice(-5).join('\n')
    : 'Primeira intera√ß√£o';
  
  return BARBER_ASSISTANT_PROMPT
    .replace('{services}', servicesText)
    .replace('{customerProfile}', profileText)
    .replace('{conversationHistory}', historyText) +
    `\n\nMensagem do cliente: "${message}"\n\nSua resposta:`;
};

// Helper function to generate intelligent responses
const generateIntelligentResponse = async (
  message: string,
  context: {
    customerProfile?: CustomerProfile;
    services?: Service[];
    conversationHistory?: string[];
  }
): Promise<string> => {
  const lowerMessage = message.toLowerCase();
  
  // Handle common questions about services
  if (lowerMessage.includes('pre√ßo') || lowerMessage.includes('valor') || lowerMessage.includes('custa')) {
    if (context.services && context.services.length > 0) {
      const serviceList = context.services
        .map(s => `‚Ä¢ ${s.name}: R$ ${s.price} (${s.duration} min)`)
        .join('\n');
      return `Aqui est√£o nossos pre√ßos:\n\n${serviceList}\n\nTodos os servi√ßos incluem produtos premium e atendimento personalizado! üí´`;
    }
  }
  
  if (lowerMessage.includes('hor√°rio') || lowerMessage.includes('funcionamento') || lowerMessage.includes('aberto')) {
    return "Funcionamos de segunda a s√°bado:\n‚Ä¢ Segunda a sexta: 9h √†s 19h\n‚Ä¢ S√°bado: 8h √†s 17h\n‚Ä¢ Domingo: Fechado\n\nVoc√™ pode agendar pelo nosso sistema online! üìÖ";
  }
  
  if (lowerMessage.includes('localiza√ß√£o') || lowerMessage.includes('endere√ßo') || lowerMessage.includes('onde')) {
    return "Estamos localizados no cora√ß√£o da cidade! üìç\n\nPara mais informa√ß√µes sobre localiza√ß√£o, visite nossa p√°gina de contato. Temos estacionamento pr√≥prio e f√°cil acesso! üöó";
  }
  
  if (lowerMessage.includes('agend') || lowerMessage.includes('marcar')) {
    return "Para agendar √© super f√°cil! üì±\n\n1. Clique em 'Sim, quero agendar!' quando eu oferecer\n2. Ou acesse nossa p√°gina de agendamento\n3. Escolha o servi√ßo, barbeiro e hor√°rio\n\nPosso te direcionar agora mesmo se quiser! üòä";
  }
  
  if (lowerMessage.includes('barbeiro') || lowerMessage.includes('profissional')) {
    return "Temos uma equipe incr√≠vel de barbeiros especializados! ‚úÇÔ∏è\n\nCada um tem sua especialidade:\n‚Ä¢ Cortes cl√°ssicos e modernos\n‚Ä¢ Barbas e bigodes\n‚Ä¢ Tratamentos capilares\n‚Ä¢ Pigmenta√ß√£o\n\nTodos s√£o certificados e usam apenas produtos premium! üåü";
  }
  
  if (lowerMessage.includes('produto') || lowerMessage.includes('pomada') || lowerMessage.includes('shampoo')) {
    return "Trabalhamos com as melhores marcas do mercado! üíé\n\n‚Ä¢ Pomadas e ceras modeladoras\n‚Ä¢ Shampoos e condicionadores\n‚Ä¢ √ìleos para barba\n‚Ä¢ Produtos p√≥s-barba\n\nTodos testados e aprovados pelos nossos profissionais! Posso recomendar algo espec√≠fico para seu tipo de cabelo! üéØ";
  }
  
  // Default intelligent response
  const name = 'amigo';
  return `Ol√° ${name}! Entendi sua pergunta. Como assistente especializado da barbearia, estou aqui para te ajudar com qualquer d√∫vida sobre nossos servi√ßos, pre√ßos, agendamentos ou produtos! üòä\n\nO que mais gostaria de saber?`;
};

// Helper function to analyze profile and recommend services
const analyzeProfileAndRecommend = (profile: CustomerProfile, services: Service[]) => {
  const recommendations: Array<{ service: Service; score: number; reasons: string[] }> = [];
  
  services.forEach(service => {
    let score = 0;
    const reasons: string[] = [];
    
    // Hair type analysis
    if (profile.hairType === 'Cacheado' || profile.hairType === 'Crespo') {
      if (service.name.toLowerCase().includes('tratamento') || 
          service.name.toLowerCase().includes('hidrata√ß√£o')) {
        score += 4;
        reasons.push('ideal para seu tipo de cabelo');
      }
    }
    
    // Style preference analysis
    if (profile.preferredStyle === 'Cl√°ssico/Tradicional') {
      if (service.name.toLowerCase().includes('tesoura') || 
          service.name.toLowerCase().includes('barba') ||
          service.name.toLowerCase().includes('cl√°ssico')) {
        score += 4;
        reasons.push('perfeito para o estilo cl√°ssico que voc√™ busca');
      }
    } else if (profile.preferredStyle === 'Moderno/Atual') {
      if (service.name.toLowerCase().includes('degrad√™') || 
          service.name.toLowerCase().includes('pigmenta√ß√£o') ||
          service.name.toLowerCase().includes('moderno')) {
        score += 4;
        reasons.push('ideal para um visual moderno e atual');
      }
    }
    
    // Budget analysis
    if (profile.budget === 'At√© R$ 30') {
      if (service.price <= 30) {
        score += 3;
        reasons.push('dentro do seu or√ßamento');
      }
    } else if (profile.budget === 'R$ 30-60') {
      if (service.price >= 30 && service.price <= 60) {
        score += 3;
        reasons.push('excelente custo-benef√≠cio');
      }
    } else if (profile.budget === 'Acima de R$ 60') {
      if (service.price > 60) {
        score += 3;
        reasons.push('servi√ßo premium');
      }
    }
    
    // Frequency analysis
    if (profile.frequency === 'Semanal') {
      if (service.name.toLowerCase().includes('corte') || 
          service.name.toLowerCase().includes('barba') ||
          service.duration <= 30) {
        score += 3;
        reasons.push('ideal para sua frequ√™ncia de manuten√ß√£o');
      }
    }
    
    // Special needs analysis
    if (profile.specialNeeds && profile.specialNeeds !== 'Nenhuma') {
      if (service.name.toLowerCase().includes('tratamento') || 
          service.duration > 60) {
        score += 2;
        reasons.push('atende suas necessidades especiais');
      }
    }
    
    if (score > 0) {
      recommendations.push({ service, score, reasons });
    }
  });
  
  // Sort by score and return top 3
  return recommendations
    .sort((a, b) => b.score - a.score)
    .slice(0, 3);
};

// Helper function to format recommendations with AI-like language
const formatRecommendationsWithAI = (
  profile: CustomerProfile,
  recommendations: Array<{ service: Service; score: number; reasons: string[] }>
): string => {
  if (recommendations.length === 0) {
    return `Analisando seu perfil, recomendo que conversemos mais para encontrar o servi√ßo ideal! Nossos barbeiros s√£o especialistas em criar looks personalizados. Que tal agendar uma consulta? üòä`;
  }
  
  let response = `Perfeito! üéØ Analisei cuidadosamente suas respostas e aqui est√£o minhas recomenda√ß√µes personalizadas:\n\n`;
  
  recommendations.forEach((rec, index) => {
    const emoji = index === 0 ? 'üèÜ' : index === 1 ? 'ü•à' : 'ü•â';
    response += `${emoji} **${rec.service.name}**\n`;
    response += `üí∞ R$ ${rec.service.price} | ‚è±Ô∏è ${rec.service.duration} min\n`;
    response += `üí° ${rec.reasons.join(', ')}\n\n`;
  });
  
  response += `Essas recomenda√ß√µes foram feitas especialmente para voc√™ com base no seu perfil! Todos os servi√ßos incluem produtos premium e o cuidado especial que voc√™ merece. ‚ú®\n\nGostaria de agendar algum deles?`;
  
  return response;
};