import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || "https://jheywkeofcttgdgquawm.supabase.co";
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function applyUserRoleMigration() {
  console.log('üöÄ Iniciando aplica√ß√£o da migra√ß√£o de perfil de usu√°rio...');
  
  try {
    // 1. Verificar se a coluna user_role j√° existe
    console.log('üìã Verificando estrutura atual da tabela profiles...');
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erro ao verificar tabela profiles:', profilesError.message);
      return;
    }
    
    // Verificar se a coluna user_role existe
    const hasUserRoleColumn = profiles && profiles.length > 0 && 'user_role' in profiles[0];
    
    if (hasUserRoleColumn) {
      console.log('‚úÖ Coluna user_role j√° existe na tabela profiles');
    } else {
      console.log('‚ö†Ô∏è  Coluna user_role n√£o encontrada. Ser√° necess√°rio aplicar a migra√ß√£o via SQL Editor do Supabase.');
      console.log('\nüìã INSTRU√á√ïES PARA APLICAR A MIGRA√á√ÉO:');
      console.log('1. Acesse https://supabase.com/dashboard/project/jheywkeofcttgdgquawm/sql/new');
      console.log('2. Execute o seguinte SQL:');
      console.log('\n```sql');
      console.log('-- Adicionar coluna user_role na tabela profiles');
      console.log(`ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS user_role TEXT DEFAULT 'Cliente' NOT NULL;`);
      console.log('');
      console.log('-- Criar √≠ndice para melhor performance');
      console.log('CREATE INDEX IF NOT EXISTS idx_profiles_user_role ON public.profiles(user_role);');
      console.log('');
      console.log('-- Atualizar fun√ß√£o handle_new_user para incluir user_role');
      console.log('CREATE OR REPLACE FUNCTION public.handle_new_user()');
      console.log('RETURNS TRIGGER AS $$');
      console.log('BEGIN');
      console.log('  INSERT INTO public.profiles (id, full_name, email, user_role)');
      console.log('  VALUES (');
      console.log('    NEW.id,');
      console.log(`    COALESCE(NEW.raw_user_meta_data->>'full_name', ''),`);
      console.log('    NEW.email,');
      console.log(`    'Cliente'`);
      console.log('  );');
      console.log('  RETURN NEW;');
      console.log('END;');
      console.log('$$ LANGUAGE plpgsql SECURITY DEFINER;');
      console.log('```\n');
    }
    
    // 2. Atualizar usu√°rios espec√≠ficos para perfil Cliente
    console.log('\nüë• Atualizando perfil dos usu√°rios espec√≠ficos...');
    
    const targetEmails = ['egrinaldo19@gmail.com', 'egrinaldo25@outlook.com'];
    
    for (const email of targetEmails) {
      const { data: updateData, error: updateError } = await supabase
        .from('profiles')
        .update({ user_role: 'Cliente' })
        .eq('email', email)
        .select();
      
      if (updateError) {
        console.error(`‚ùå Erro ao atualizar usu√°rio ${email}:`, updateError.message);
      } else if (updateData && updateData.length > 0) {
        console.log(`‚úÖ Usu√°rio ${email} atualizado para perfil Cliente`);
      } else {
        console.log(`‚ö†Ô∏è  Usu√°rio ${email} n√£o encontrado na base de dados`);
      }
    }
    
    // 3. Verificar resultado final
    console.log('\nüìä Verificando resultado final...');
    
    const { data: allProfiles, error: allProfilesError } = await supabase
      .from('profiles')
      .select('email, user_role')
      .order('email');
    
    if (allProfilesError) {
      console.error('‚ùå Erro ao verificar perfis:', allProfilesError.message);
    } else {
      console.log('\nüìã Perfis atuais:');
      allProfiles?.forEach(profile => {
        const role = profile.user_role || 'N√£o definido';
        console.log(`  ‚Ä¢ ${profile.email}: ${role}`);
      });
    }
    
    console.log('\nüéâ Migra√ß√£o de perfil de usu√°rio conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
  }
}

// Executar a migra√ß√£o
applyUserRoleMigration();