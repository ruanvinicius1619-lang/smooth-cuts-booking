import { createClient } from '@supabase/supabase-js';
import readline from 'readline';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente do arquivo .env.local
dotenv.config({ path: '.env.local' });

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || "https://jheywkeofcttgdgquawm.supabase.co";
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY; // Chave de servi√ßo necess√°ria

// Lista de administradores para criar
const ADMIN_USERS = [
  {
    email: 'admin@mateusbarber.com',
    password: '1233',
    full_name: 'Administrador Principal',
    phone: '(11) 99999-9999'
  },
  {
    email: 'mateus@mateusbarber.com',
    password: '1233',
    full_name: 'Mateus - Propriet√°rio',
    phone: '(11) 98888-8888'
  },
  {
    email: 'gerente@mateusbarber.com',
    password: '1233',
    full_name: 'Gerente da Barbearia',
    phone: '(11) 97777-7777'
  }
];

async function createAdminUsers() {
  console.log('üîß Iniciando cria√ß√£o de usu√°rios administradores...');
  
  // Verificar se a chave de servi√ßo est√° configurada
  if (!SUPABASE_SERVICE_KEY) {
    console.error('‚ùå ERRO: Chave de servi√ßo do Supabase n√£o configurada!');
    console.log('\nüìã Para configurar:');
    console.log('1. Acesse https://supabase.com/dashboard');
    console.log('2. V√° em Settings > API');
    console.log('3. Copie a "service_role" key');
    console.log('4. Execute: set SUPABASE_SERVICE_ROLE_KEY=sua_chave_aqui');
    console.log('5. Execute novamente este script');
    return;
  }
  
  // Criar cliente com chave de servi√ßo (permite criar usu√°rios)
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
  
  console.log('‚úÖ Cliente Supabase configurado com chave de servi√ßo');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (const admin of ADMIN_USERS) {
    try {
      console.log(`\n‚è≥ Criando usu√°rio: ${admin.email}`);
      
      // Criar usu√°rio usando Admin API
      const { data, error } = await supabase.auth.admin.createUser({
        email: admin.email,
        password: admin.password,
        email_confirm: true, // Confirma o email automaticamente
        user_metadata: {
          full_name: admin.full_name,
          phone: admin.phone
        }
      });
      
      if (error) {
        if (error.message.includes('already registered')) {
          console.log(`‚ÑπÔ∏è  Usu√°rio ${admin.email} j√° existe`);
          successCount++;
        } else {
          console.error(`‚ùå Erro ao criar ${admin.email}:`, error.message);
          errorCount++;
        }
      } else {
        console.log(`‚úÖ Usu√°rio ${admin.email} criado com sucesso!`);
        console.log(`   ID: ${data.user.id}`);
        successCount++;
      }
      
    } catch (error) {
      console.error(`‚ùå Erro inesperado ao criar ${admin.email}:`, error.message);
      errorCount++;
    }
  }
  
  console.log('\nüìä RESUMO:');
  console.log(`‚úÖ Sucessos: ${successCount}`);
  console.log(`‚ùå Erros: ${errorCount}`);
  
  if (successCount > 0) {
    console.log('\nüéâ Usu√°rios administradores criados!');
    console.log('\nüìù Credenciais de acesso:');
    ADMIN_USERS.forEach(admin => {
      console.log(`   Email: ${admin.email}`);
      console.log(`   Senha: ${admin.password}`);
      console.log('');
    });
    console.log('\nüîê IMPORTANTE: Altere as senhas ap√≥s o primeiro login!');
  }
}

// Fun√ß√£o para solicitar confirma√ß√£o
function askConfirmation() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  console.log('üöÄ Script de Cria√ß√£o de Usu√°rios Administradores');
  console.log('\nüìã Usu√°rios que ser√£o criados:');
  ADMIN_USERS.forEach(admin => {
    console.log(`   - ${admin.email} (${admin.full_name})`);
  });
  
  rl.question('\n‚ùì Deseja continuar? (s/N): ', (answer) => {
    if (answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim') {
      rl.close();
      createAdminUsers();
    } else {
      console.log('‚ùå Opera√ß√£o cancelada.');
      rl.close();
    }
  });
}

// Executar script
askConfirmation();

export { createAdminUsers };