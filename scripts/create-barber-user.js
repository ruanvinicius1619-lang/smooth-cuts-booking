import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

// Configura√ß√£o do Supabase
const SUPABASE_URL = process.env.VITE_SUPABASE_URL || "https://jheywkeofcttgdgquawm.supabase.co";
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Usu√°rio barbeiro para criar
const BARBER_USER = {
  email: 'barbeiro@smoothcuts.com',
  password: '123456',
  full_name: 'Barbeiro Principal',
  phone: '(11) 99999-9999'
};

async function createBarberUser() {
  console.log('üîß Iniciando cria√ß√£o do usu√°rio barbeiro...');
  
  // Verificar se a chave de servi√ßo est√° configurada
  if (!SUPABASE_SERVICE_KEY) {
    console.error('‚ùå ERRO: Chave de servi√ßo do Supabase n√£o configurada!');
    console.log('\nüìã Para configurar:');
    console.log('1. Acesse https://supabase.com/dashboard');
    console.log('2. V√° em Settings > API');
    console.log('3. Copie a "service_role" key');
    console.log('4. Adicione SUPABASE_SERVICE_ROLE_KEY=sua_chave_aqui no arquivo .env');
    console.log('5. Execute novamente este script');
    return;
  }
  
  // Criar cliente com chave de servi√ßo (permite criar usu√°rios)
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
  
  console.log('‚úÖ Cliente Supabase configurado com chave de servi√ßo');
  
  try {
    console.log(`\n‚è≥ Criando usu√°rio barbeiro: ${BARBER_USER.email}`);
    
    // Criar usu√°rio usando Admin API
    const { data, error } = await supabase.auth.admin.createUser({
      email: BARBER_USER.email,
      password: BARBER_USER.password,
      email_confirm: true, // Confirma o email automaticamente
      user_metadata: {
        full_name: BARBER_USER.full_name,
        phone: BARBER_USER.phone
      }
    });
    
    if (error) {
      if (error.message.includes('already registered')) {
        console.log(`‚ÑπÔ∏è  Usu√°rio ${BARBER_USER.email} j√° existe`);
        console.log('‚úÖ Voc√™ pode usar as credenciais existentes para fazer login');
      } else {
        console.error(`‚ùå Erro ao criar ${BARBER_USER.email}:`, error.message);
        return;
      }
    } else {
      console.log(`‚úÖ Usu√°rio ${BARBER_USER.email} criado com sucesso!`);
      console.log(`   ID: ${data.user.id}`);
    }
    
    console.log('\nüéâ Usu√°rio barbeiro configurado!');
    console.log('\nüìù Credenciais de acesso:');
    console.log(`   Email: ${BARBER_USER.email}`);
    console.log(`   Senha: ${BARBER_USER.password}`);
    console.log('\nüîê Agora voc√™ pode fazer login no painel do barbeiro!');
    console.log('\nüåê Acesse: http://localhost:8080/auth');
    console.log('   1. Fa√ßa login com as credenciais acima');
    console.log('   2. Depois acesse: http://localhost:8080/barber');
    
  } catch (error) {
    console.error(`‚ùå Erro inesperado:`, error.message);
  }
}

// Executar script
createBarberUser();

export { createBarberUser };